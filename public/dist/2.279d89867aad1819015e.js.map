{"version":3,"sources":["webpack:///./src/components/styled/StyledDashboard.js","webpack:///./src/constants/constants.js","webpack:///./src/components/d3Map.js","webpack:///./src/components/MapContainer.js","webpack:///./src/components/styled/StyledTable.js","webpack:///./src/components/Table.js","webpack:///./src/components/styled/StyledBarchart.js","webpack:///./src/components/d3Bar.js","webpack:///./src/components/Barcharts.js","webpack:///./src/components/Dashboard.js"],"names":["theme","fontSizes","colors","styled","main","blue","hex2rgba","red","green","darkGray","API_ROOT_URL_COVID19INDIA","MAPS_DIR","STATE_NAMES","AP","AR","AS","BR","CT","GA","GJ","HR","HP","JH","KA","KL","MP","MH","MN","ML","MZ","NL","OR","PB","RJ","SK","TN","TG","TR","UT","UP","WB","AN","CH","DN","DL","JK","LA","LD","PY","TT","stateCodes","stateCodesMap","Object","keys","map","key","index","push","code","name","STATE_CODES","ACTIVE_TABS","ACTIVE","CONFIRMED","RECOVERED","DECEASED","MARGIN","D3Map","element","data","vis","this","svg","select","append","attr","WIDTH","HEIGHT","mapGroup","stateBordersGroup","path","geoPath","geoIdentity","activeTab","colorScale","getMapScale","transition","duration","json","then","geoData","mesh","topojson","objects","states","features","getFeatures","paths","selectAll","enter","d","getFillColor","text","properties","st_nm","stateBorders","getStrokeColor","label","style","getLabelColor","toUpperCase","exit","remove","stateCode","stateData","total","confirmed","scaleSequential","Math","max","getDomainValue","colorInterpolator","tab","t","interpolateReds","interpolateBlues","interpolateGreens","interpolateGreys","interpolateOranges","feature","district","state","obj","assign","id","min","Infinity","countryData","i","length","val","StyledMapContainer","fonts","div","black","React","memo","chartArea","useRef","useState","chart","setChart","useEffect","update","current","onActiveTabChange","className","ref","prevProps","currProps","activeTabs","gray","Table","setStates","StyledTable","idx","substr","formatNumber","deceased","recovered","BarChart","type","strokeColor","dates","modifiedData","date","getBgColor","barGroup","yScale","scaleLinear","domain","extent","range","xScale","scaleTime","Date","xAxisGroup","yAxisGroup","timeFormatter","timeFormat","xAxisCall","axisBottom","tickFormat","call","yAxisCall","axisLeft","lineGenerator","line","x","y","curve","curveMonotoneX","datum","timeSeries","activeChartRef","confirmedChartRef","recoveredChartRef","deceasedChartRef","activeChart","setActiveChart","confirmedChart","setConfirmedChart","recoveredChart","setRecoveredChart","deceasedChart","setDeceasedChart","StyledBarchart","Dashboard","setCountryData","setActiveTab","setTimeSeries","res","err","console","log","values","forEach","active","cardsArray","useMemo","arr","cKey","toLowerCase","StyledDashboard","card","onClick"],"mappings":"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","file":"2.279d89867aad1819015e.js","sourcesContent":["import styled from \"styled-components\";\nimport { media, theme } from \"../../styles\";\nimport { hex2rgba } from \"../../utils\";\n\nconst { fontSizes, colors } = theme;\n\nexport default styled.main`\n  min-height: calc(100vh - 7.5rem);\n  width: 100%;\n  padding: 5rem 2rem;\n  max-width: 130rem;\n  margin: auto;\n\n  .cards-container {\n    display: flex;\n    margin-top: 2rem;\n    max-width: 100%;\n    justify-content: space-between;\n  }\n\n  .card {\n    width: 22%;\n    box-shadow: 0 0.4rem 1rem rgba(0,0,0,.2);\n    padding: 3rem 1.2rem;\n    border-radius: .4rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    cursor: pointer;\n    &.active {\n      color: ${colors.blue};\n      background: ${hex2rgba(colors.blue, 0.2)};\n    }\n    &.confirmed {\n      color: ${colors.red};\n      background: ${hex2rgba(colors.red, 0.2)};\n    }\n    &.recovered {\n      color: ${colors.green};\n      background: ${hex2rgba(colors.green, 0.2)};\n    }\n    &.deceased {\n      color: ${colors.darkGray};\n      background: ${hex2rgba(colors.darkGray, 0.2)};\n    }\n\n    .card-title {\n      text-transform: uppercase;\n      font-size: 1.2rem;\n      font-weight: 600;\n    }\n\n    .card-number {\n      margin-top: 1rem;\n      font-size: 1.6rem;\n      font-weight: 700;\n    }\n  }\n\n  .map-table-container {\n    display: flex;\n    margin-top: 5rem;\n  }\n\n  .map-container {\n    margin-right: 1rem;\n    flex-shrink: 0;\n  }\n\n  .middle-section {\n    margin-top: 6rem;\n  }\n`;","export const API_ROOT_URL_COVID19INDIA = 'https://api.covid19india.org/v4/min';\n\nexport const MAP_TYPES = {\n  COUNTRY: 0,\n  STATE: 1,\n};\n\nexport const UNASSIGNED_STATE_CODE = 'UN';\n\nexport const MAPS_DIR = '/public/projected_maps';\n\nexport const MAP_META = {\n  AP: {\n    geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  AR: {\n    geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  AS: {\n    geoDataFile: `${MAPS_DIR}/assam.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  BR: {\n    geoDataFile: `${MAPS_DIR}/bihar.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  CT: {\n    geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  GA: {\n    geoDataFile: `${MAPS_DIR}/goa.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  GJ: {\n    geoDataFile: `${MAPS_DIR}/gujarat.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  HR: {\n    geoDataFile: `${MAPS_DIR}/haryana.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  HP: {\n    geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  JK: {\n    geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  JH: {\n    geoDataFile: `${MAPS_DIR}/jharkhand.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  KA: {\n    geoDataFile: `${MAPS_DIR}/karnataka.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  KL: {\n    geoDataFile: `${MAPS_DIR}/kerala.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  MP: {\n    geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  MH: {\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  MN: {\n    geoDataFile: `${MAPS_DIR}/manipur.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  ML: {\n    geoDataFile: `${MAPS_DIR}/meghalaya.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  MZ: {\n    geoDataFile: `${MAPS_DIR}/mizoram.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  NL: {\n    geoDataFile: `${MAPS_DIR}/nagaland.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  OR: {\n    geoDataFile: `${MAPS_DIR}/odisha.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  PB: {\n    geoDataFile: `${MAPS_DIR}/punjab.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  RJ: {\n    geoDataFile: `${MAPS_DIR}/rajasthan.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  SK: {\n    geoDataFile: `${MAPS_DIR}/sikkim.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  TN: {\n    geoDataFile: `${MAPS_DIR}/tamilnadu.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  TG: {\n    geoDataFile: `${MAPS_DIR}/telangana.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  TR: {\n    geoDataFile: `${MAPS_DIR}/tripura.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  UT: {\n    geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  UP: {\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  WB: {\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  AN: {\n    geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  CH: {\n    geoDataFile: `${MAPS_DIR}/chandigarh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  DN: {\n    geoDataFile: `${MAPS_DIR}/dnh-and-dd.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  DL: {\n    geoDataFile: `${MAPS_DIR}/delhi.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  LA: {\n    geoDataFile: `${MAPS_DIR}/ladakh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  LD: {\n    geoDataFile: `${MAPS_DIR}/lakshadweep.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  PY: {\n    geoDataFile: `${MAPS_DIR}/puducherry.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  TT: {\n    geoDataFile: `${MAPS_DIR}/india.json`,\n    mapType: MAP_TYPES.COUNTRY,\n  },\n};\n\nexport const STATE_NAMES = {\n  AP: 'Andhra Pradesh',\n  AR: 'Arunachal Pradesh',\n  AS: 'Assam',\n  BR: 'Bihar',\n  CT: 'Chhattisgarh',\n  GA: 'Goa',\n  GJ: 'Gujarat',\n  HR: 'Haryana',\n  HP: 'Himachal Pradesh',\n  JH: 'Jharkhand',\n  KA: 'Karnataka',\n  KL: 'Kerala',\n  MP: 'Madhya Pradesh',\n  MH: 'Maharashtra',\n  MN: 'Manipur',\n  ML: 'Meghalaya',\n  MZ: 'Mizoram',\n  NL: 'Nagaland',\n  OR: 'Odisha',\n  PB: 'Punjab',\n  RJ: 'Rajasthan',\n  SK: 'Sikkim',\n  TN: 'Tamil Nadu',\n  TG: 'Telangana',\n  TR: 'Tripura',\n  UT: 'Uttarakhand',\n  UP: 'Uttar Pradesh',\n  WB: 'West Bengal',\n  AN: 'Andaman and Nicobar Islands',\n  CH: 'Chandigarh',\n  DN: 'Dadra and Nagar Haveli and Daman and Diu',\n  DL: 'Delhi',\n  JK: 'Jammu and Kashmir',\n  LA: 'Ladakh',\n  LD: 'Lakshadweep',\n  PY: 'Puducherry',\n  TT: 'India',\n  [UNASSIGNED_STATE_CODE]: 'Unassigned',\n};\n\nconst stateCodes = [];\nconst stateCodesMap = {};\nObject.keys(STATE_NAMES).map((key, index) => {\n  stateCodesMap[STATE_NAMES[key]] = key;\n  stateCodes.push({\n    code: key,\n    name: STATE_NAMES[key]\n  });\n  return null;\n});\nexport const STATE_CODES = stateCodesMap;\nexport const STATE_CODES_ARRAY = stateCodes;\n\nexport const ACTIVE_TABS = {\n  ACTIVE: 'active',\n  CONFIRMED: 'confirmed',\n  RECOVERED: 'recovered',\n  DECEASED: 'deceased'\n};","import { select, selectAll } from \"d3-selection\";\nimport { min, max, extent } from \"d3-array\";\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleLog } from \"d3-scale\";\nimport { interpolateBlues, interpolateReds, interpolateGreens, interpolatePurples, interpolateGreys, interpolateOranges } from \"d3-scale-chromatic\";\nimport { transition } from \"d3-transition\";\nimport { json } from \"d3-fetch\";\nimport * as topojson from \"topojson\";\nimport { geoIdentity, geoPath } from 'd3-geo';\nimport { scaleSequential } from \"d3-scale\";\nimport { STATE_CODES, ACTIVE_TABS } from \"../constants/constants\";\n\nimport { theme } from \"../styles\";\nimport { hex2rgba } from \"../utils\";\nconst { colors } = theme;\n\nconst MARGIN = { TOP: 100, BOTTOM: 50, LEFT: 50, RIGHT: 10 };\nconst WIDTH = 500 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 600 - MARGIN.TOP - MARGIN.BOTTOM;\n\nexport default class D3Map {\n  constructor(element, data) {\n    const vis = this;\n    vis.data = data;\n\n    vis.svg = select(element)\n      .append(\"svg\")\n      .attr(\"class\", \"map-svg\")\n      .attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n      .attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n\n    vis.mapGroup = vis.svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`);\n\n    vis.stateBordersGroup = vis.svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`);\n\n    vis.path = geoPath(geoIdentity());\n    vis.activeTab = ACTIVE_TABS.CONFIRMED;\n\n    vis.colorScale = vis.getMapScale();\n    vis.transition = transition().duration(500);\n\n    json('/projected_maps/india.json').then(geoData => {\n      vis.mesh = topojson.mesh(geoData, geoData.objects.states);\n      vis.features = vis.getFeatures(geoData);\n      vis.paths = vis.mapGroup.selectAll(\"path\")\n        .data(vis.features);\n      vis.paths.enter()\n        .append(\"path\")\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"fill\", d => vis.getFillColor(d))\n        .attr(\"d\", vis.path)\n        .attr('stroke-width', 1.8)\n        .attr('stroke-opacity', 0)\n        .append(\"title\")\n        .text(d => d.properties.st_nm);\n\n      vis.stateBorders = vis.stateBordersGroup.selectAll('path')\n        .data([vis.mesh])\n        .enter()\n        .append('path')\n        .attr('fill', 'none')\n        .attr('stroke-width', 1.5)\n        .attr('d', vis.path)\n        .attr('stroke', vis.getStrokeColor());\n    });\n\n    vis.label = vis.mapGroup\n      .append(\"text\")\n      .attr(\"transform\", `translate(${WIDTH - 50}, ${10})`)\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"class\", \"bar-label\")\n      .style(\"color\", this.getLabelColor())\n      .text(this.activeTab.toUpperCase());\n  }\n\n  getStrokeColor() {\n    switch (this.activeTab) {\n      case ACTIVE_TABS.CONFIRMED:\n        return hex2rgba(colors.red, 0.2);\n      case ACTIVE_TABS.ACTIVE:\n        return hex2rgba(colors.blue, 0.2);\n      case ACTIVE_TABS.RECOVERED:\n        return hex2rgba(colors.green, 0.2);\n      case ACTIVE_TABS.DECEASED:\n        return hex2rgba(colors.darkGray, 0.4);\n      default:\n        return hex2rgba(colors.blue, 0.2);\n    }\n  }\n\n  getLabelColor() {\n    switch (this.activeTab) {\n      case ACTIVE_TABS.CONFIRMED:\n        return colors.red;\n      case ACTIVE_TABS.ACTIVE:\n        return colors.blue;\n      case ACTIVE_TABS.RECOVERED:\n        return colors.green;\n      case ACTIVE_TABS.DECEASED:\n        return colors.darkGray;\n      default:\n        return colors.blue;\n    }\n  }\n\n  onActiveTabChange(activeTab) {\n    const vis = this;\n    vis.activeTab = ACTIVE_TABS[activeTab];\n    vis.colorScale = vis.getMapScale();\n\n    vis.paths.exit().transition(vis.transition).remove();\n    vis.paths.enter()\n      .append(\"path\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"d\", vis.path)\n      .attr('stroke-width', 1.8)\n      .attr('stroke-opacity', 0)\n      .attr(\"fill\", d => vis.getFillColor(d))\n      .append(\"title\")\n      .text(d => d.properties.st_nm);\n\n    vis.stateBorders\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"d\", vis.path)\n      .attr('stroke', vis.getStrokeColor());\n\n    vis.label\n      .style(\"color\", this.getLabelColor())\n      .text(this.activeTab.toUpperCase());\n\n  }\n\n  getFillColor(d) {\n    const stateCode = STATE_CODES[d.properties.st_nm];\n    if (stateCode === 'LD') return;\n    const stateData = this.data[stateCode];\n    return this.colorScale(stateData.total.confirmed);\n  }\n\n  getMapScale() {\n    return scaleSequential(\n      [0, Math.max(1, this.getDomainValue()[1])],\n      this.colorInterpolator(this.activeTab)\n    );\n  }\n\n  colorInterpolator(tab) {\n    switch (tab) {\n      case ACTIVE_TABS.CONFIRMED:\n        return (t) => interpolateReds(t * 0.85);\n      case ACTIVE_TABS.ACTIVE:\n        return (t) => interpolateBlues(t * 0.85);\n      case ACTIVE_TABS.RECOVERED:\n        return (t) => interpolateGreens(t * 0.85);\n      case ACTIVE_TABS.DECEASED:\n        return (t) => interpolateGreys(t * 0.85);\n      default:\n        return (t) => interpolateOranges(t * 0.85);\n    }\n  };\n\n  getFeatures(data) {\n    const features = topojson.feature(data, data.objects.states).features;\n    return features.map(feature => {\n      const district = feature.properties.district;\n      const state = feature.properties.st_nm;\n      const obj = Object.assign({}, feature);\n      obj.id = `TT-${state}${district ? '-' + district : ''}`;\n      return obj;\n    });\n  }\n\n  getDomainValue() {\n    let min = Infinity, max = -Infinity;\n    let countryData = this.data;\n    let keys = Object.keys(countryData);\n    for (let i = 0; i < keys.length; i++) {\n      if (keys[i] === 'TT') {\n        continue;\n      }\n      let val;\n      if (this.activeTab === ACTIVE_TABS.ACTIVE) {\n        val = countryData[keys[i]].total[ACTIVE_TABS.CONFIRMED] - countryData[keys[i]].total[ACTIVE_TABS.RECOVERED] - countryData[keys[i]].total[ACTIVE_TABS.DECEASED];\n      } else {\n        val = countryData[keys[i]].total[this.activeTab];\n      }\n      if (val < min) {\n        min = val;\n      }\n      if (val > max) {\n        max = val;\n      }\n    }\n    return [0, max];\n  }\n\n\n  update() {\n    const vis = this;\n  }\n}","import React, { useRef, useEffect, useState } from 'react';\nimport styled from \"styled-components\";\nimport D3Map from './d3Map';\nimport { media, theme } from \"../styles\";\nimport { hex2rgba } from '../utils';\nconst { colors, fonts } = theme;\n\nconst StyledMapContainer = styled.div`\n  .map-svg {\n    border-radius: 1rem;\n    box-shadow: inset 0 .1rem 1rem ${hex2rgba(colors.black, 0.4)};\n  }\n`;\n\nconst MapContainer = ({ countryData, activeTab }) => {\n  const chartArea = useRef();\n  const [chart, setChart] = useState(null);\n\n  useEffect(() => {\n    if (!chart) {\n      setChart(new D3Map(chartArea.current, countryData));\n    } else {\n      chart.update(countryData);\n    }\n  }, [chart]);\n\n  useEffect(() => {\n    chart && chart.paths && chart.onActiveTabChange(activeTab);\n  }, [activeTab]);\n\n  return (\n    <StyledMapContainer className=\"map-area\" ref={chartArea}></StyledMapContainer>\n  )\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (prevProps.activeTab !== currProps.activeTabs) {\n    return false;\n  }\n  return true;\n}\n\nexport default React.memo(MapContainer, isEqual);","import styled from \"styled-components\";\nimport { media, theme } from \"../../styles\";\nimport { hex2rgba } from '../../utils';\nconst { colors, fonts } = theme;\n\nexport default styled.div `\n  border-radius: 3px;\n  display: inline-grid;\n  font-size: 12px;\n  min-width: 100%;\n  grid-template-rows: auto;\n  grid-template-columns: repeat(5, 1fr);\n  max-height: 60rem;\n  overflow: auto;\n  grid-gap: .4rem;\n  margin-left: 2rem;\n\n  .row {\n    display: contents;\n    &:not(:last-child) {\n      margin-bottom: .4rem;\n    }\n    &:nth-child(2n) {\n      .cell {\n        background: ${hex2rgba(colors.darkGray, 0.2)};\n      }\n    }\n    &:nth-child(2n+1) {\n      .cell {\n        background: ${hex2rgba(colors.gray, 0.4)};\n      }\n    }\n    &.heading {\n      font-weight: 600;\n      font-size: 1.3rem;\n    }\n  }\n\n  .cell {\n    padding: 1rem .8rem;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    border-radius: .3rem;\n  }\n`;","import React, { useState, useEffect } from 'react';\nimport StyledTable from './styled/StyledTable';\nimport { STATE_NAMES } from '../constants/constants';\nimport { formatNumber } from '../utils';\n\nconst Table = ({ countryData }) => {\n  const [states, setStates] = useState([]);\n\n  useEffect(() => {\n    setStates(Object.keys(countryData));\n  }, [countryData]);\n\n  return (\n    <StyledTable>\n      <div className=\"row heading\">\n        <div className=\"cell\">State/UT</div>\n        <div className=\"cell\">Confirmed</div>\n        <div className=\"cell\">Active</div>\n        <div className=\"cell\">Recovered</div>\n        <div className=\"cell\">Deceased</div>\n      </div>\n      {!!states.length && states.map((state, idx) => {\n        if (state !== 'TT') {\n          return (\n            <div className=\"row\" key={state}>\n              <div className=\"cell\">{STATE_NAMES[state].substr(0,19)}</div>\n              <div className=\"cell\">{formatNumber(countryData[state].total.confirmed, 'int') || 0}</div>\n              <div className=\"cell\">{formatNumber(countryData[state].total.confirmed - (countryData[state].total.deceased || 0) - (countryData[state].total.recovered || 0), 'int')}</div>\n              <div className=\"cell\">{formatNumber(countryData[state].total.recovered, 'int') || 0}</div>\n              <div className=\"cell\">{formatNumber(countryData[state].total.deceased, 'int') || 0}</div>\n            </div>\n          )\n        }\n      })}\n      {!!states.length && \n        <div className=\"row heading\">\n          <div className=\"cell\">India</div>\n          <div className=\"cell\">{formatNumber(countryData['TT'].total.confirmed, 'int')}</div>\n          <div className=\"cell\">{formatNumber(countryData['TT'].total.confirmed - countryData['TT'].total.deceased - countryData['TT'].total.recovered, 'int')}</div>\n          <div className=\"cell\">{formatNumber(countryData['TT'].total.recovered, 'int')}</div>\n          <div className=\"cell\">{formatNumber(countryData['TT'].total.deceased, 'int')}</div>\n        </div>\n      }\n    </StyledTable>\n  )\n}\n\nexport default Table;","import styled from \"styled-components\";\nimport { media, theme } from \"../../styles\";\nimport { hex2rgba } from \"../../utils\";\n\nconst { fontSizes, colors } = theme;\n\nexport default styled.div`\n  text-align: center;\n  .bar-svg {\n    border-radius: 1rem;\n    box-shadow: inset 0 .1rem 1rem ${hex2rgba(colors.black, 0.4)};\n    margin: 2rem 2rem 0 0;\n  }\n  .bar-label {\n    font-weight: 700;\n    font-size: 1.4rem;\n  }\n`;","import { select, selectAll } from \"d3-selection\";\nimport { scaleLinear, scaleTime } from \"d3-scale\";\nimport { min, max, extent } from \"d3-array\";\nimport { axisBottom, axisLeft } from \"d3-axis\";\nimport { line, curveMonotoneX } from \"d3-shape\";\nimport { timeFormat } from \"d3-time-format\";\nimport { ACTIVE_TABS } from \"../constants/constants\";\nimport { theme } from \"../styles\";\nimport { hex2rgba, formatNumber } from \"../utils\";\nconst { colors } = theme;\n\nconst MARGIN = { TOP: 20, BOTTOM: 60, LEFT: 60, RIGHT: 20 };\nconst WIDTH = 500 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM;\n\nexport default class BarChart {\n  constructor(element, data, type) {\n    this.element = element;\n    this.data = data;\n    this.type = type;\n    this.strokeColor = this.getStrokeColor();\n    this.dates = Object.keys(this.data);\n    this.modifiedData = [];\n    for (let date of this.dates) {\n      this.modifiedData.push({ date, val: this.data[date].total[this.type] || 0 });\n    }\n\n    this.svg = select(this.element)\n      .attr(\"class\", \"bar-svg\")\n      .attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n      .attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n      .style(\"background\", this.getBgColor());\n\n    this.barGroup = this.svg.append(\"g\")\n      .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`);\n\n    this.yScale = scaleLinear()\n      .domain(extent(this.modifiedData, d => d.val))\n      .range([HEIGHT, 0]);\n\n    this.xScale = scaleTime().domain(extent(this.dates, d => new Date(d))).range([0, WIDTH]);\n\n    this.xAxisGroup = this.barGroup.append(\"g\")\n      .attr(\"transform\", `translate(0, ${HEIGHT})`);\n    this.yAxisGroup = this.barGroup.append(\"g\");\n\n    const timeFormatter = timeFormat(\"%B\")\n\n    this.xAxisCall = axisBottom(this.xScale)\n      .tickFormat(d => timeFormatter(d).substr(0, 3));\n    this.xAxisGroup.call(this.xAxisCall);\n\n    this.yAxisCall = axisLeft(this.yScale)\n      .tickFormat(d => formatNumber(d, 'short'));\n    this.yAxisGroup.call(this.yAxisCall);\n\n    this.lineGenerator = line()\n      .x(d => this.xScale(new Date(d.date)))\n      .y(d => this.yScale(d.val))\n      .curve(curveMonotoneX);\n\n    this.barGroup\n      .append(\"path\")\n      .datum(this.modifiedData)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", this.strokeColor)\n      .attr(\"stroke-width\", \"2px\")\n      .attr(\"d\", this.lineGenerator);\n\n    this.barGroup\n      .append(\"text\")\n      .attr(\"transform\", `translate(${WIDTH/2}, ${10})`)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"class\", \"bar-label\")\n      .style(\"color\", this.strokeColor)\n      .text(this.type.toUpperCase());\n  }\n\n  getBgColor() {\n    switch (this.type) {\n      case ACTIVE_TABS.CONFIRMED:\n        return hex2rgba(colors.red, 0.1);\n      case ACTIVE_TABS.ACTIVE:\n        return hex2rgba(colors.blue, 0.1);\n      case ACTIVE_TABS.RECOVERED:\n        return hex2rgba(colors.green, 0.1);\n      case ACTIVE_TABS.DECEASED:\n        return hex2rgba(colors.darkGray, 0.1);\n      default:\n        return hex2rgba(colors.blue, 0.1);\n    }\n  }\n\n  getStrokeColor() {\n    switch (this.type) {\n      case ACTIVE_TABS.CONFIRMED:\n        return colors.red;\n      case ACTIVE_TABS.ACTIVE:\n        return colors.blue;\n      case ACTIVE_TABS.RECOVERED:\n        return colors.green;\n      case ACTIVE_TABS.DECEASED:\n        return colors.darkGray;\n      default:\n        return colors.blue;\n    }\n  }\n\n}","import React, { useEffect, useRef, useState } from 'react';\nimport StyledBarchart from './styled/StyledBarchart';\nimport BarChart from './d3Bar';\nimport { ACTIVE_TABS } from '../constants/constants';\n\nconst Barcharts = ({ timeSeries }) => {\n  const { dates } = timeSeries[\"TT\"];\n\n  const activeChartRef = useRef();\n  const confirmedChartRef = useRef();\n  const recoveredChartRef = useRef();\n  const deceasedChartRef = useRef();\n\n  const [activeChart, setActiveChart] = useState(null);\n  const [confirmedChart, setConfirmedChart] = useState(null);\n  const [recoveredChart, setRecoveredChart] = useState(null);\n  const [deceasedChart, setDeceasedChart] = useState(null);\n\n  useEffect(() => {\n    if (!activeChart) {\n      setActiveChart(new BarChart(activeChartRef.current, dates, ACTIVE_TABS.ACTIVE));\n    }\n    if (!confirmedChart) {\n      setConfirmedChart(new BarChart(confirmedChartRef.current, dates, ACTIVE_TABS.CONFIRMED));\n    }\n    if (!recoveredChart) {\n      setRecoveredChart(new BarChart(recoveredChartRef.current, dates, ACTIVE_TABS.RECOVERED));\n    }\n    if (!deceasedChart) {\n      setDeceasedChart(new BarChart(deceasedChartRef.current, dates, ACTIVE_TABS.DECEASED));\n    }\n  }, []);\n\n  return (\n    <StyledBarchart>\n      <svg className=\"bar-svg active-bar\" ref={activeChartRef}></svg>\n      <svg className=\"bar-svg confirmed-bar\" ref={confirmedChartRef}></svg>\n      <svg className=\"bar-svg recovered-bar\" ref={recoveredChartRef}></svg>\n      <svg className=\"bar-svg deceased-bar\" ref={deceasedChartRef}></svg>\n    </StyledBarchart>\n  )\n}\n\nconst isEqual = () => {\n  return true;\n}\n\nexport default React.memo(Barcharts, isEqual);","import React, { useEffect, useState, useMemo } from 'react';\nimport StyledDashboard from './styled/StyledDashboard';\nimport { API_ROOT_URL_COVID19INDIA, ACTIVE_TABS } from '../constants/constants';\nimport MapContainer from './MapContainer';\nimport { json } from \"d3-fetch\";\nimport Table from './Table';\nimport { formatNumber } from '../utils';\nimport Barcharts from './Barcharts';\n\nconst Dashboard = () => {\n  const [countryData, setCountryData] = useState({});\n  const [activeTab, setActiveTab] = useState('active');\n  const [timeSeries, setTimeSeries] = useState(null);\n\n  useEffect(() => {\n    json(`${API_ROOT_URL_COVID19INDIA}/data.min.json`)\n      .then(res => {\n        // Object.values(res).forEach(obj => {\n        // });\n        setCountryData(res);\n        setActiveTab(ACTIVE_TABS.CONFIRMED);\n      }).catch(err => {\n        console.log(err);\n      });\n    json(`${API_ROOT_URL_COVID19INDIA}/timeseries.min.json`)\n      .then(res => {\n        Object.values(res.TT.dates).forEach(d => {\n          d.total.active = (d.total.confirmed || 0) - (d.total.recovered || 0) - (d.total.deceased || 0)\n        });\n        setTimeSeries(res);\n      }).catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  const cardsArray = useMemo(() => {\n    if (!countryData || !Object.keys(countryData).length) return;\n    let arr = [];\n    let data = countryData[\"TT\"].total;\n    let keys = Object.keys(ACTIVE_TABS);\n    for (let key of keys) {\n      let cKey = key;\n      key = key.toLowerCase();\n      if (data[key]) {\n        arr.push({ cKey, key, val: formatNumber(data[key], 'int') });\n      } else {\n        arr.push({ cKey, key, val: formatNumber(data.confirmed - (data.recovered || 0) - (data.deceased || 0), 'int') });\n      }\n    }\n    return arr;\n  }, [countryData]);\n\n\n  return (\n    <>\n      {countryData && !!Object.keys(countryData).length ? (\n        <StyledDashboard>\n          <h1>\n            Dashboard\n        </h1>\n          <section className=\"cards-container\">\n            {\n              cardsArray && !!cardsArray.length && cardsArray.map(card => (\n                <div className={`card ${card.key}`} key={card.key} onClick={() => setActiveTab(card.cKey)}>\n                  <h3 className=\"card-title\">{card.key}</h3>\n                  <p className=\"card-number\">{card.val}</p>\n                </div>\n              ))}\n          </section>\n          <div className=\"map-table-container\">\n            <div className=\"map-container\">\n              <MapContainer countryData={countryData} activeTab={activeTab} />\n            </div>\n            <div className=\"table-container\">\n              <Table countryData={countryData} />\n            </div>\n          </div>\n          {timeSeries &&\n            <section className=\"middle-section\">\n              <Barcharts timeSeries={timeSeries} />\n            </section>\n          }\n        </StyledDashboard>\n      ) : (\n          <div>Loading...</div>\n        )\n      }\n    </>\n  )\n}\n\nexport default Dashboard;"],"sourceRoot":""}